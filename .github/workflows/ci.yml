name: CI

on:
  push:
    branches: master
  pull_request:
    branches: master

jobs:
  install_project:
    env:
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASS: ${{ secrets.DB_PASS }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
    runs-on: ubuntu-latest
    steps:
      - name: Install node v20
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

  #frontend_build:
  #  needs: install_project
  #  runs-on: ubuntu-latest
  #  defaults:
  #    run:
  #      working-directory: client
  #  steps:
  #    - name: Check out project
  #      uses: actions/checkout@v4

  #    - run: npm install
  #    - run: npm run build

  frontend_test:
    needs: install_project
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: client
    steps:
      - name: Check out project
        uses: actions/checkout@v4

      - run: npm install
      - run: npm run test

  backend_lint:
    needs: install_project
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: server
    steps:
      - name: Check out project
        uses: actions/checkout@v4

      - run: |
          python -m venv deckbuilder_venv
          source deckbuilder_venv/bin/activate
          pip install -r requirements.txt
          pylint --load-plugins pylint_django --django-settings-module=project.settings project ; test $? -eq 0

  backend_tests:
    needs: install_project
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: server
    steps:
      - name: Check out project
        uses: actions/checkout@v4

      - run: |
          python -m venv deckbuilder_venv
          source deckbuilder_venv/bin/activate
          pip install -r requirements.txt
          python manage.py test ; test $? -eq 0
